// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4678.Cybercavs2016Code.commands;

import org.usfirst.frc4678.Cybercavs2016Code.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class DriveTrain extends Command {

	double joyStickX;
	double joyStickY;
	double leftPower;
	double rightPower;
	public static final double MAX_POWER = 1;
	public static final double MAX_SPEED = 2500;
	public static final double LEFT_X_ADJUSTMENT = 1;
	public static final double LEFT_Y_ADJUSTMENT = 1;
	public static final double RIGHT_X_ADJUSTMENT = 1;
	public static final double RIGHT_Y_ADJUSTMENT = 1;
	private static final double STRAIGHT_SPEED_FACTOR = 1.0/12500.0;
	private static final double TURNING_SPEED_FACTOR = 5.0/25000.0;

	// List<String> lines = Arrays.asList("accelerometer X: " +
	// Robot.robotDrive.getBuiltInAccelX(), "The second line");
	// Path file = Paths.get("the-file-name.txt");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveTrain() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.robotDrive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		SmartDashboard.putNumber("Pickup Elbow Position", Robot.pickupArm.getElbowPosition());
		SmartDashboard.putNumber("Pickup Wrist Position", Robot.pickupArm.getWristPosition());
		SmartDashboard.putNumber("Pickup Wheels Position", Robot.pickupArm.getPickupWheelsPosition());
		SmartDashboard.putNumber("Left Wheels Position", Robot.robotDrive.getLeftEncoder());
		SmartDashboard.putNumber("Right Wheels Position", Robot.robotDrive.getRightEncoder());
//		SmartDashboard.putNumber("Accelerometer X: ", Robot.robotDrive.getBuiltInAccelX());
//		SmartDashboard.putNumber("Accelerometer Y: ", Robot.robotDrive.getBuiltInAccelY());
//		SmartDashboard.putNumber("Accelerometer Z: ", Robot.robotDrive.getBuiltInAccelZ());
		SmartDashboard.putNumber("Gyro Position: ", Robot.robotDrive.getGyroPosition());
		SmartDashboard.putNumber("Front Light sensor: ", Robot.robotDrive.getFrontLightSensorValue());
		SmartDashboard.putNumber("Back Light sensor: ", Robot.robotDrive.getBackLightSensorValue());
		SmartDashboard.putNumber("Wrist Angular Position: ", Robot.pickupArm.getWristAngular());
		SmartDashboard.putNumber("Elbow Angular Position: ", Robot.pickupArm.getElbowAngular());
		SmartDashboard.putBoolean("Back ball distance ", Robot.pickupArm.getBackSensor());
		SmartDashboard.putNumber("Wrist Error: ", Robot.pickupArm.getWristError());
		SmartDashboard.putBoolean("check switch: ", Robot.catapult.getLatchSwitch());
		SmartDashboard.putNumber("winch position ", Robot.catapult.getWinchPosition());
		SmartDashboard.putNumber("left drive train speed: ", Robot.robotDrive.getLeftSpeed());
		SmartDashboard.putNumber("Right drive train speed: ", Robot.robotDrive.getRightSpeed());
		SmartDashboard.putNumber("Manipulator Elbow Angular Position: ", Robot.manipulatorArm.getManipulatorElbowAngular());
		SmartDashboard.putNumber("Manipulator Wrist Angular Position: ", Robot.manipulatorArm.getManipulatorWristAngular());
		SmartDashboard.putNumber("Manipulator Elbow Encoder Position: ", Robot.manipulatorArm.getManipulatorElbowPosition());
		SmartDashboard.putNumber("Manipulator Wrist Encoder Position: ", Robot.manipulatorArm.getManipulatorWristPosition());
		SmartDashboard.putNumber("pickup wheels speed ", Robot.pickupArm.getPickupWheelsSpeed());
		
		joyStickX = Robot.oi.driverGamepad.getX();
		joyStickY = Robot.oi.driverGamepad.getY();
		SmartDashboard.putNumber("joystick X: ", joyStickX);
		SmartDashboard.putNumber("joystick Y: ", joyStickY);
		SmartDashboard.putNumber("Right Power ", Robot.robotDrive.getRightPower());
		SmartDashboard.putNumber("Left Power ", Robot.robotDrive.getLeftPower());
//		rightPower = joyStickY + joyStickX;
//		leftPower = joyStickY - joyStickX;
		// Y only
//		leftPower = Math.sin(joyStickY) * MAX_POWER * LEFT_Y_ADJUSTMENT;
//		rightPower = Math.sin(joyStickY) * MAX_POWER * RIGHT_Y_ADJUSTMENT;
		// X only
//		 leftPower = Math.sin(-joyStickX) * MAX_POWER * LEFT_X_ADJUSTMENT;
//		 rightPower = Math.sin(joyStickX) * MAX_POWER * RIGHT_X_ADJUSTMENT;
		// Add them together
//		leftPower = Math.sin(joyStickY) * MAX_POWER * LEFT_Y_ADJUSTMENT - Math.sin(joyStickX) * MAX_POWER * LEFT_X_ADJUSTMENT;
//		rightPower = Math.sin(joyStickY) * MAX_POWER * RIGHT_Y_ADJUSTMENT + Math.sin(joyStickX) * MAX_POWER * RIGHT_X_ADJUSTMENT;
//		Robot.robotDrive.setRightMotor(rightPower);
//		Robot.robotDrive.setLeftMotor(leftPower);
		// SmartDashboard.putNumber("garbagePosition",
		// Robot.trashMagnet.getGarbagePosition());
		/*
		 * try { Files.write(file, lines, Charset.forName("UTF-8")); } catch
		 * (IOException e) { 
		 * e.printStackTrace(); }
		 */
		// Y only
//		if(Math.abs(joyStickY) < 0.0085){
//			joyStickY = 0;
//		}
//		double expectedLeftSpeed = Math.sin(joyStickY) * MAX_SPEED * LEFT_Y_ADJUSTMENT;
//		double expectedRightSpeed = Math.sin(joyStickY) * MAX_SPEED * RIGHT_Y_ADJUSTMENT;
//		double currentLeftSpeed = Robot.robotDrive.getLeftSpeed();
//		double currentRightSpeed = Robot.robotDrive.getRightSpeed();
//		double currentLeftPower = Robot.robotDrive.getLeftPower();
//		double currentRightPower = Robot.robotDrive.getRightPower();
//		
//		currentLeftPower = currentLeftPower + STRAIGHT_SPEED_FACTOR * (currentLeftSpeed - expectedLeftSpeed); 
//		currentRightPower = currentRightPower + STRAIGHT_SPEED_FACTOR * (currentRightSpeed - expectedRightSpeed);
		
		// X only
		
		double expectedLeftSpeed = joyStickX * MAX_SPEED * LEFT_X_ADJUSTMENT;
		double expectedRightSpeed = -joyStickX * MAX_SPEED * RIGHT_X_ADJUSTMENT;
		double currentLeftSpeed = Robot.robotDrive.getLeftSpeed();
		double currentRightSpeed = Robot.robotDrive.getRightSpeed();
		double currentLeftPower = Robot.robotDrive.getLeftPower();
		double currentRightPower = Robot.robotDrive.getRightPower();
		
		currentLeftPower = currentLeftPower + TURNING_SPEED_FACTOR * (currentLeftSpeed - expectedLeftSpeed); 
		currentRightPower = currentRightPower + TURNING_SPEED_FACTOR * (currentRightSpeed - expectedRightSpeed);
		
		if(Math.abs(currentLeftPower) < 0.025){
			currentLeftPower = 0;
		}
		if(Math.abs(currentRightPower) < 0.025){
			currentRightPower = 0;
		}
		if(Math.abs(joyStickX) < 0.0085){
			currentLeftPower = 0;
			currentRightPower = 0;
		}
		
		Robot.robotDrive.setLeftMotor(currentLeftPower);
		Robot.robotDrive.setRightMotor(currentRightPower);
		
//		double expectedLeftSpeed = (joyStickX) * 2500;
//		double expectedRightSpeed = (-joyStickX) * 2500;
//		double currentLeftSpeed = Robot.robotDrive.getLeftSpeed();
//		double currentRightSpeed = Robot.robotDrive.getRightSpeed();
//		double currentLeftPower = Robot.robotDrive.getLeftPower();
//		double currentRightPower = Robot.robotDrive.getRightPower();
//		double leftError = currentLeftSpeed - expectedLeftSpeed;
//		double rightError = currentRightSpeed - expectedRightSpeed;	
//		
//			currentLeftPower = currentLeftPower + TURNING_SPEED_FACTOR * (leftError); 
//			currentRightPower = currentRightPower + TURNING_SPEED_FACTOR * (rightError);
//		if (joyStickX < 0.0085) {
//			currentLeftPower = 0;
//			currentRightPower = 0;
//		}
//		Robot.robotDrive.setLeftMotor(currentLeftPower);
//		Robot.robotDrive.setRightMotor(currentRightPower);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
