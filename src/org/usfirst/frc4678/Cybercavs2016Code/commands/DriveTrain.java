// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4678.Cybercavs2016Code.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import org.usfirst.frc4678.Cybercavs2016Code.Robot;

public class DriveTrain extends Command {

	double joyStickX;
	double joyStickY;
	double leftPower;
	double rightPower;
	//List<String> lines = Arrays.asList("accelerometer X: " + Robot.robotDrive.getBuiltInAccelX(), "The second line");
	//Path file = Paths.get("the-file-name.txt");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveTrain() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.robotDrive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
//		Robot.pickupArm.setPickupInitPos();
		
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		SmartDashboard.putNumber("Pickup Elbow Position", Robot.pickupArm.getElbowPosition());
		SmartDashboard.putNumber("Pickup Wrist Position", Robot.pickupArm.getWristPosition());
		SmartDashboard.putNumber("Pickup Wheels Position", Robot.pickupArm.getPickupWheelsPosition());
		SmartDashboard.putNumber("Left Wheels Position", Robot.robotDrive.getLeftEncoder());
		SmartDashboard.putNumber("Right Wheels Position", Robot.robotDrive.getRightEncoder());
		SmartDashboard.putNumber("Accelerometer X: ", Robot.robotDrive.getBuiltInAccelX());
		SmartDashboard.putNumber("Accelerometer Y: ", Robot.robotDrive.getBuiltInAccelY());
		SmartDashboard.putNumber("Accelerometer Z: ", Robot.robotDrive.getBuiltInAccelZ());
		SmartDashboard.putNumber("Gyro Position: ", Robot.robotDrive.getGyroPosition());
		SmartDashboard.putNumber("Front Light sensor: ", Robot.robotDrive.getFrontLightSensorValue());
		SmartDashboard.putNumber("Back Light sensor: ", Robot.robotDrive.getBackLightSensorValue());
		SmartDashboard.putNumber("Wrist Angular Position: ", Robot.pickupArm.getWristAngular());
		SmartDashboard.putNumber("Elbow Angular Position: ", Robot.pickupArm.getElbowAngular());
		SmartDashboard.putBoolean("Back ball distance ", Robot.pickupArm.getBackSensor());
		SmartDashboard.putNumber("Wrist Error: ", Robot.pickupArm.getWristError());
		joyStickX = Robot.oi.driverGamepad.getX();
		joyStickY = Robot.oi.driverGamepad.getY();
		rightPower = (joyStickY * Math.abs(joyStickY)) + (joyStickX * joyStickX * joyStickX);
		leftPower = (joyStickY * Math.abs(joyStickY)) - (joyStickX * joyStickX * joyStickX);
		//rightPower = joyStickY - joyStickX;
		//leftPower = joyStickY + joyStickX;
		Robot.robotDrive.setRightMotor(rightPower);
		Robot.robotDrive.setLeftMotor(leftPower);
		//SmartDashboard.putNumber("garbagePosition", Robot.trashMagnet.getGarbagePosition());
		/*try {
			Files.write(file, lines, Charset.forName("UTF-8"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
