// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4678.Cybercavs2016Code.commands;

import org.usfirst.frc4678.Cybercavs2016Code.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class DriveTrain extends Command {

	double joyStickX;
	double joyStickY;
	double leftPower;
	double rightPower;
	public static final double MAX_POWER = 1;
	public static final double LEFT_X_ADJUSTMENT = 1;
	public static final double LEFT_Y_ADJUSTMENT = 1;
	public static final double RIGHT_X_ADJUSTMENT = 1;
	public static final double RIGHT_Y_ADJUSTMENT = 1;

	// List<String> lines = Arrays.asList("accelerometer X: " +
	// Robot.robotDrive.getBuiltInAccelX(), "The second line");
	// Path file = Paths.get("the-file-name.txt");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveTrain() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.robotDrive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		SmartDashboard.putNumber("Pickup Elbow Position", Robot.pickupArm.getElbowPosition());
		SmartDashboard.putNumber("Pickup Wrist Position", Robot.pickupArm.getWristPosition());
		SmartDashboard.putNumber("Pickup Wheels Position", Robot.pickupArm.getPickupWheelsPosition());
		SmartDashboard.putNumber("Left Wheels Position", Robot.robotDrive.getLeftEncoder());
		SmartDashboard.putNumber("Right Wheels Position", Robot.robotDrive.getRightEncoder());
//		SmartDashboard.putNumber("Accelerometer X: ", Robot.robotDrive.getBuiltInAccelX());
//		SmartDashboard.putNumber("Accelerometer Y: ", Robot.robotDrive.getBuiltInAccelY());
//		SmartDashboard.putNumber("Accelerometer Z: ", Robot.robotDrive.getBuiltInAccelZ());
		SmartDashboard.putNumber("Gyro Position: ", Robot.robotDrive.getGyroPosition());
		SmartDashboard.putNumber("Front Light sensor: ", Robot.robotDrive.getFrontLightSensorValue());
		SmartDashboard.putNumber("Back Light sensor: ", Robot.robotDrive.getBackLightSensorValue());
		SmartDashboard.putNumber("Wrist Angular Position: ", Robot.pickupArm.getWristAngular());
		SmartDashboard.putNumber("Elbow Angular Position: ", Robot.pickupArm.getElbowAngular());
		SmartDashboard.putBoolean("Back ball distance ", Robot.pickupArm.getBackSensor());
		SmartDashboard.putNumber("Wrist Error: ", Robot.pickupArm.getWristError());
		SmartDashboard.putBoolean("check switch: ", Robot.catapult.getLatchSwitch());
		joyStickX = Robot.oi.driverGamepad.getX();
		joyStickY = Robot.oi.driverGamepad.getY();
//		rightPower = joyStickY + joyStickX;
//		leftPower = joyStickY - joyStickX;
		// Y only
		// leftPower = joyStickY * MAX_POWER * LEFT_Y_ADJUSTMENT;
		// rightPower = joyStickY * MAX_POWER * RIGHT_Y_ADJUSTMENT;
		// X only
		// leftPower = -joyStickX * MAX_POWER * LEFT_X_ADJUSTMENT;
		// rightPower = joyStickX * MAX_POWER * RIGHT_X_ADJUSTMENT;
		// Add them together
		leftPower = joyStickY * MAX_POWER * LEFT_Y_ADJUSTMENT - joyStickX * MAX_POWER * LEFT_X_ADJUSTMENT;
		rightPower = joyStickY * MAX_POWER * RIGHT_Y_ADJUSTMENT + joyStickX * MAX_POWER * RIGHT_X_ADJUSTMENT;
		;
		Robot.robotDrive.setRightMotor(rightPower);
		Robot.robotDrive.setLeftMotor(leftPower);
		// SmartDashboard.putNumber("garbagePosition",
		// Robot.trashMagnet.getGarbagePosition());
		/*
		 * try { Files.write(file, lines, Charset.forName("UTF-8")); } catch
		 * (IOException e) { // TODO Auto-generated catch block
		 * e.printStackTrace(); }
		 */
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
