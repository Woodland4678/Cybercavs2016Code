// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.Cybercavs2016Code.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.Cybercavs2016Code.Robot;

/**
 *
 */
public class SetManipulatorArm extends Command {
	double operatorJoystickX = 0;
	double operatorJoystickY = 0;
	boolean holdWristPos = true;
	boolean holdElbowPos = true;
	double elbowPosition = 0;
	double wristPosition = 0;
	double wristAngle = 0;
	double elbowAngle = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public SetManipulatorArm() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.manipulatorArm);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
		Robot.manipulatorArm.setManipulatorElbowMode(5);
		Robot.manipulatorArm.setManipulatorWristMode(5);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	operatorJoystickX = Robot.oi.getOperatorGamepad().getX();
    	operatorJoystickY = Robot.oi.getOperatorGamepad().getY();
    	if (Math.abs(operatorJoystickX) > 0.01) {
    		Robot.manipulatorArm.setManipulatorWristMode(4);
    		Robot.manipulatorArm.setManipulatorMode("Manual");
    		holdWristPos = false;
    		wristPosition = Robot.manipulatorArm.getManipulatorWristPosition();
    	}
    	if (Math.abs(operatorJoystickY) > 0.01) {
    		Robot.manipulatorArm.setManipulatorElbowMode(4);
    		Robot.manipulatorArm.setManipulatorMode("Manual");
    		holdElbowPos = false;
    		elbowPosition = Robot.manipulatorArm.getManipulatorElbowPosition();
    	}
    	if (Robot.manipulatorArm.getManipulatorMode() == "ShootMode") {
    		Robot.manipulatorArm.setManipulatorElbowMode(5);
    		Robot.manipulatorArm.setManipulatorWristMode(5);
    		Robot.manipulatorArm.readyToShoot();
    	}
    	else if(Robot.manipulatorArm.getManipulatorMode() == "Rest") {
    		Robot.manipulatorArm.setManipulatorElbowMode(5);
    		Robot.manipulatorArm.setManipulatorWristMode(5);
    		Robot.manipulatorArm.restMode();
    	}
    	else if(Robot.manipulatorArm.getManipulatorMode() == "CategoryC") {
    		Robot.manipulatorArm.setManipulatorElbowMode(5);
    		Robot.manipulatorArm.setManipulatorWristMode(5);
    		Robot.manipulatorArm.categoryC();
    	}
    	else if(Robot.manipulatorArm.getManipulatorMode() == "Portcullis") {
    		Robot.manipulatorArm.setManipulatorElbowMode(5);
    		Robot.manipulatorArm.setManipulatorWristMode(5);
    		Robot.manipulatorArm.portcullis1();
    	}
    	if (Robot.manipulatorArm.getManipulatorMode() == "Manual") {
    		if(operatorJoystickY > 0.2) {
    			operatorJoystickY = 0.2;
    		}
    		if(operatorJoystickX > 0.2) {
    			operatorJoystickX = 0.2;
    		}
    		if(operatorJoystickY < -0.2) {
    			operatorJoystickY = -0.2;
    		}
    		if(operatorJoystickX < -0.2) {
    			operatorJoystickX = -0.2;
    		}
    		if (Math.abs(operatorJoystickX) < 0.01 && holdWristPos == false) {    			
    			Robot.manipulatorArm.setManipulatorWristMode(5);
        		holdWristPos = true;
    		}
    		if (Math.abs(operatorJoystickY) < 0.01 && holdElbowPos == false) {
    			Robot.manipulatorArm.setManipulatorElbowMode(5);
    			holdElbowPos = true;
    		}
    		if (holdWristPos == true) {
    			Robot.manipulatorArm.setManipulatorWrist(wristPosition);
    		}
    		else {
    			Robot.manipulatorArm.setManipulatorWrist(-operatorJoystickX);
    		}
    		if (holdElbowPos == true) {
    			Robot.manipulatorArm.setManipulatorElbow(elbowPosition);
    		}  		
    		else {
    			Robot.manipulatorArm.setManipulatorElbow(-operatorJoystickY);
    		}
    		elbowAngle = ((elbowPosition - 4000)/27379.75);
    		wristAngle = ((2842 - wristPosition)/ 11589);
    	}
    	System.out.println(wristAngle + ", " + elbowAngle);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
