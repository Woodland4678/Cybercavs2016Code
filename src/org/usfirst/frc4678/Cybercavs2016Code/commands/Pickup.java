// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4678.Cybercavs2016Code.commands;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.Cybercavs2016Code.Robot;
import org.usfirst.frc4678.Cybercavs2016Code.RobotMap;
import org.usfirst.frc4678.Cybercavs2016Code.subsystems.PickupArm;

/**
 *
 */
public class Pickup extends Command {

	public int delayForStep1 = 0;
	public int originalElbowEncoderValue = Robot.pickupArm.getElbowPosition();
	public int originalWristEncoderValue = Robot.pickupArm.getElbowPosition();
	public int elbowEncoderValue = 0;
	public int wristEncoderValue = 0;
	public int stepNumber = 0;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public Pickup() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.pickupArm.spinIntakeWheels();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		switch (stepNumber) {
		case 0:
			if (elbowEncoderValue >= Robot.pickupElbowPosition()) {
				stepNumber++;
			} else {
				Robot.pickupArm.rotateElbowToPickupPosition();
				elbowEncoderValue = Robot.pickupArm.getElbowPosition() - originalElbowEncoderValue;
			}
			if (wristEncoderValue <= Robot.pickupWristPosition()) {
				Robot.pickupArm.rotateWristToPickupPosition();
				wristEncoderValue = Robot.pickupArm.getElbowPosition() - originalWristEncoderValue;
			}
		case 1:
			if (delayForStep1 < 100) {
				delayForStep1++;
			} else {
				stepNumber++;
			}
		case 2:
			if (elbowEncoderValue <= Robot.restElbowPosition()) {
				stepNumber++;
			} else {
				Robot.pickupArm.rotateElbowToRestPosition();
				elbowEncoderValue = Robot.pickupArm.getElbowPosition() - originalElbowEncoderValue;
			}
			if (wristEncoderValue >= Robot.restWristPosition()) {
				Robot.pickupArm.rotateWristToRestPosition();
				wristEncoderValue = Robot.pickupArm.getElbowPosition() - originalWristEncoderValue;
			}
		case 3:
			isFinished();
		}

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return true;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.pickupArm.stopIntakeWheels();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
