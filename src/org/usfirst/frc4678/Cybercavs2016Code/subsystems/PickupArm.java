// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4678.Cybercavs2016Code.subsystems;

import org.usfirst.frc4678.Cybercavs2016Code.Robot;
import org.usfirst.frc4678.Cybercavs2016Code.RobotMap;
import org.usfirst.frc4678.Cybercavs2016Code.commands.setPickupArm;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class PickupArm extends Subsystem {
	public int pickupState = 0;
	public int spitState = 0;
	PowerDistributionPanel pdp = new PowerDistributionPanel();
	int count = 0;
	String armMode;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon pickupElbowMotor = RobotMap.pickupArmpickupElbowMotor;
    private final CANTalon pickupWristMotor = RobotMap.pickupArmpickupWristMotor;
    private final CANTalon pickupWheels = RobotMap.pickupArmpickupWheels;
    private final DigitalInput ballSensor = RobotMap.pickupArmballSensor;
    private final DigitalInput backBallSensor = RobotMap.pickupArmbackBallSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new setPickupArm());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	//////////////////////////////////////
	////////// Access functions//////////
	/////////////////////////////////////

	public int getElbowPosition() {	return pickupElbowMotor.getEncPosition();}

	public int getWristPosition() {return pickupWristMotor.getEncPosition();}

	public int getPickupWheelsPosition() {	return pickupWheels.getEncPosition();}

	public double getCurrent(int channel) {	return pdp.getCurrent(channel);}
	
	public double getWristError() {return pickupWristMotor.getError();}
	
	public String getArmMode() {return armMode;}

	public int getWristAngular() {return pickupWristMotor.getPulseWidthPosition();}
	
	public int getElbowAngular() {return pickupElbowMotor.getPulseWidthPosition();}
	
	public boolean getBackSensor() {return backBallSensor.get();}
	
	/////////////////////////////////////
	////////// Setter functions//////////
	/////////////////////////////////////
	
	public void setPickupWheelsMode(int mode) {
		if (mode == 0) {
			pickupWheels.changeControlMode(TalonControlMode.Current);
		}
		if (mode == 1) {
			pickupWheels.changeControlMode(TalonControlMode.Disabled);
		}
		if (mode == 2) {
			pickupWheels.changeControlMode(TalonControlMode.Follower);
		}
		if (mode == 3) {
			pickupWheels.changeControlMode(TalonControlMode.MotionProfile);
		}
		if (mode == 4) {
			pickupWheels.changeControlMode(TalonControlMode.PercentVbus);
		}
		if (mode == 5) {
			pickupWheels.changeControlMode(TalonControlMode.Position);
		}
		if (mode == 6) {
			pickupWheels.changeControlMode(TalonControlMode.Speed);
		}
		if (mode == 7) {
			pickupWheels.changeControlMode(TalonControlMode.Voltage);
		}
	}

	public void setElbowMode(int mode) {
		if (mode == 0) {
			pickupElbowMotor.changeControlMode(TalonControlMode.Current);
		}
		if (mode == 1) {
			pickupElbowMotor.changeControlMode(TalonControlMode.Disabled);
		}
		if (mode == 2) {
			pickupElbowMotor.changeControlMode(TalonControlMode.Follower);
		}
		if (mode == 3) {
			pickupElbowMotor.changeControlMode(TalonControlMode.MotionProfile);
		}
		if (mode == 4) {
			pickupElbowMotor.changeControlMode(TalonControlMode.PercentVbus);
		}
		if (mode == 5) {
			pickupElbowMotor.changeControlMode(TalonControlMode.Position);
		}
		if (mode == 6) {
			pickupElbowMotor.changeControlMode(TalonControlMode.Speed);
		}
		if (mode == 7) {
			pickupElbowMotor.changeControlMode(TalonControlMode.Voltage);
		}
	}

	public void setWristMode(int mode) {
		if (mode == 0) {
			pickupWristMotor.changeControlMode(TalonControlMode.Current);
		}
		if (mode == 1) {
			pickupWristMotor.changeControlMode(TalonControlMode.Disabled);
		}
		if (mode == 2) {
			pickupWristMotor.changeControlMode(TalonControlMode.Follower);
		}
		if (mode == 3) {
			pickupWristMotor.changeControlMode(TalonControlMode.MotionProfile);
		}
		if (mode == 4) {
			pickupWristMotor.changeControlMode(TalonControlMode.PercentVbus);
		}
		if (mode == 5) {
			pickupWristMotor.changeControlMode(TalonControlMode.Position);
		}
		if (mode == 6) {
			pickupWristMotor.changeControlMode(TalonControlMode.Speed);
		}
		if (mode == 7) {
			pickupWristMotor.changeControlMode(TalonControlMode.Voltage);
		}
	}
	
	public void setElbowPosition(int position) {
		pickupElbowMotor.configPeakOutputVoltage(+8f, -8f); //max and min power
		pickupElbowMotor.setPID(0.15, 0, 0); //PID values
		pickupElbowMotor.set(position); // allowable error in the PID position movement
	}

	public void setWristPosition(int position) {
		pickupWristMotor.configPeakOutputVoltage(+8f, -8f); //max and min power
		pickupWristMotor.setPID(0.15, 0, 0); // PID values
		pickupWristMotor.setAllowableClosedLoopErr(600); // allowable error in the PID position movement
		pickupWristMotor.set(position);
	}

	public void setPickupWheels(double voltage) {
		pickupWheels.set(voltage);
	}
	public void resetPickupState() {
		pickupState = 0;
	}
	public void resetSpitState() {
		spitState = 0;
	}
	public void resetArmEncValues() {
		pickupElbowMotor.setEncPosition(0);
		pickupWristMotor.setEncPosition(0);
	}
	public void setArmMode(String Mode) {
		armMode = Mode;
	}
	public void setPickupInitPos() {
		pickupWristMotor.setEncPosition(pickupWristMotor.getPulseWidthPosition());
		pickupElbowMotor.setEncPosition(pickupElbowMotor.getPulseWidthPosition());
	}
	
	////////////////////////////////////////////////////
	////////// Functions to set Arms positions//////////
	////////////////////////////////////////////////////
	

	
	//////////////////////////////////////////////
	//////////Arm Positioning functions//////////
	////////////////////////////////////////////
	public void pickup() {
		switch(pickupState) {
		case 0: //moves Arm to higher position and waits for wrist to be in position
			setPickupWheels(Robot.pickupWheelsPower());
			setWristPosition(Robot.wristPullInPosition());
			if (pickupElbowMotor.getEncPosition() > 10000) {  
				setWristPosition(Robot.wristPullInPosition());
				if (pickupWristMotor.getEncPosition() > 5229) { //detects if wrist is in position so that the elbow may continue moving
					setElbowPosition(Robot.pickupElbowPosition());
				}
			}
			else {
				setElbowPosition(Robot.pickupElbowPosition() - 25000);//moves arm to specific location until the wrist is in position so we don't go over 15 in
			}
			if (!backBallSensor.get()) { //starts incrementing count once the back sensor sees the ball
				count++;			
			}
			else {
				count = 0;
			}
			if (count > 15) { // after 15 counts (~1/4 of a second) it assumes the ball is centered and proceeds to pick up the ball
				pickupState++;
				count = 0;
			}
			System.out.println("Count: " + count);
		break;
		case 1://moves the wrist out and the elbow down to lift the ball over the bumper
			//System.out.println("IN CASE 1!!!!");
			setWristPosition(Robot.wristPullInPosition() + 1000); 
			setElbowPosition(Robot.pickupElbowPosition() + 2000);
			if (!ballSensor.get()) {
				pickupState++;
			}
		break;
		case 2: //Once elbow is high enough it will wait for the ball the settle in the catapult
			//System.out.println("IN CASE 2!!!!!");	
			setElbowPosition(Robot.holdElbowPosition() + 5000); //moves arm to this position to allow the ball to have time to settle in the robot
			count++;
			if (count > 50) {
				setPickupWheels(0);
				setArmMode("Hold");
				count = 0;
			}
		break;
		}
	}
	public void holdPosition() {
		setWristPosition(Robot.holdWristPosition());
		if (pickupWristMotor.getPosition() > -22000) { //moves wrist first just in case the wrist is below the elbow
			setElbowPosition(Robot.holdElbowPosition());
		}
		setPickupWheels(0);
	}
	public void spitOut() {
		switch(spitState) {
		case 0:	//reverses wheels, moves elbow
			setPickupWheels(-Robot.pickupWheelsPower());
			setElbowPosition(Robot.spitOutElbowPosition());
			if (Math.abs(pickupElbowMotor.getError()) < 700) { //this is in the make sure the arm moves before the wrist so the wrist doesn't crash against the robot
				spitState++;
			}
		break;
		case 1: // once elbow is moved begin the move wrist
			setWristPosition(Robot.spitOutWristPosition());
			if (pickupWristMotor.getEncPosition() < -32000) { // if wrist is in desired position is will continue
				spitState++;
			}
		break;
		case 2: //move elbow up to give the ball more push out the robot
			System.out.println("In case 2!!!!!!!!!!!");
			setElbowPosition(Robot.spitOutElbowPosition() + 8500); 
		}
	}
	
	///////////////////////////////////
	//////////Misc Functions//////////
	/////////////////////////////////
	
	public void stopArmMotors() {
		pickupElbowMotor.disable();
		pickupWristMotor.disable();
		pickupWheels.disable();
	}
	public void stopIntakeWheels() {
		pickupWheels.disable();
	}
}
