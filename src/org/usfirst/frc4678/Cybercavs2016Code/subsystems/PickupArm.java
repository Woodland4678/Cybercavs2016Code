// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4678.Cybercavs2016Code.subsystems;

import org.usfirst.frc4678.Cybercavs2016Code.Robot;
import org.usfirst.frc4678.Cybercavs2016Code.RobotMap;
import org.usfirst.frc4678.Cybercavs2016Code.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TalonSRX;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class PickupArm extends Subsystem {
    private static final int STOP = 5;
	private static final int RESET_WRIST_POSITION = 3;
	private static final int READY_FOR_WRIST_RESET = 2;
	private static final int RESET_ELBOW_POSITION = 1;
	private static final int INITILIAZTION = 0;
	public int calibrateState = 0;
    public int calibrateCount = 0;
    public int previousEncPosition = 0;
    PowerDistributionPanel pdp = new PowerDistributionPanel();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon pickupElbowMotor = RobotMap.pickupArmpickupElbowMotor;
    private final CANTalon pickupWristMotor = RobotMap.pickupArmpickupWristMotor;
    private final CANTalon pickupWheels = RobotMap.pickupArmpickupWheels;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public int getElbowPosition() {
		return pickupElbowMotor.getEncPosition();
	}

	public int getWristPosition() {
		return pickupWristMotor.getEncPosition();
	}
	public int getPickupWheelsPosition() {
		return pickupWheels.getEncPosition();
	}

	public void spinIntakeWheels() {
		pickupWheels.set(Robot.pickupWheelsPower());
	}

	public void stopIntakeWheels() {
		pickupWheels.disable();
	}

	public void rotateElbowToPickupPosition() {
		pickupElbowMotor.changeControlMode(TalonControlMode.Position);
		pickupElbowMotor.set(Robot.pickupElbowPosition());
	}

	public void rotateElbowToRestPosition() {
		pickupElbowMotor.changeControlMode(TalonControlMode.Position);
		pickupElbowMotor.set(Robot.restElbowPosition());
	}

	public void rotateWristToPickupPosition() {
		pickupWristMotor.changeControlMode(TalonControlMode.Position);
		pickupWristMotor.set(Robot.pickupWristPosition());
	}

	public void rotateWristToRestPosition() {
		pickupWristMotor.changeControlMode(TalonControlMode.Position);
		pickupWristMotor.set(Robot.restWristPosition());
	}
	public double getCurrent(int channel) {
		return pdp.getCurrent(channel);
	}
	
	public void pickupPosition() {
		Robot.pickupArm.spinIntakeWheels();
		pickupElbowMotor.changeControlMode(TalonControlMode.Position);
		pickupWristMotor.changeControlMode(TalonControlMode.Position);
		pickupElbowMotor.set(Robot.pickupElbowPosition());
		pickupWristMotor.set(Robot.pickupWristPosition());
	}
	public void stopArmMotors() {
		pickupElbowMotor.disable();
		pickupWristMotor.disable();
		pickupWheels.disable();
	}
	
	public void calibratePickupArm() {
		switch (calibrateState) { 
		case INITILIAZTION: 
			calibrateCount = 0;
			calibrateState++;
			previousEncPosition = pickupElbowMotor.getEncPosition();
			break;
		case RESET_ELBOW_POSITION:
			pickupElbowMotor.changeControlMode(TalonControlMode.Voltage);
			pickupElbowMotor.set(-3.5);
			if (calibrateCount > 12) {
				if ((pickupElbowMotor.getEncPosition() - previousEncPosition) < 3 ) {
					pickupElbowMotor.setEncPosition(0);
					calibrateState++;
				}
			}
			calibrateCount++;
			previousEncPosition = pickupElbowMotor.getEncPosition();
			break;
		case READY_FOR_WRIST_RESET:
			//pickupElbowMotor.changeControlMode(TalonControlMode.Position);
			//pickupElbowMotor.setPID(2, 1, 1);
			//pickupElbowMotor.set(Robot.restElbowPosition());
			pickupElbowMotor.disable();
			calibrateCount ++;
			if (calibrateCount > 25) {
				calibrateState++;
			}
			break;
		case RESET_WRIST_POSITION:
			//pickupWristMotor.changeControlMode(TalonControlMode.Voltage);
			//pickupWristMotor.set(2.5);
			if (pdp.getCurrent(4) > 2) {
				pickupWristMotor.setEncPosition(0);
				calibrateState++;
			}
			break;
		case 4:
			//pickupWristMotor.changeControlMode(TalonControlMode.Position);
			//pickupWristMotor.set(Robot.restWristPosition());
			calibrateCount ++;
			if (calibrateCount > 25) {
				calibrateState++;
			}
			break;
		case STOP:
			pickupElbowMotor.changeControlMode(TalonControlMode.Speed);
			pickupElbowMotor.disable();
			pickupWristMotor.changeControlMode(TalonControlMode.Speed);
			pickupWristMotor.disable();
			calibrateCount = 0;
		}
		System.out.println("Elbow Current: " + pdp.getCurrent(5));
		System.out.println("Elbow Position: " + pickupElbowMotor.getEncPosition());
	}
	public void resetCalibrateState() {
		calibrateState = 0;
	}

	public void testWristMove(float degree) {
		pickupWristMotor.changeControlMode(TalonControlMode.Voltage);
		pickupWristMotor.set(degree);
	}
	public void testElbowMove(float degree) {
		pickupElbowMotor.changeControlMode(TalonControlMode.Voltage);
		pickupElbowMotor.set(degree);
	}
	public void testPickupWheelsMove(float degree) {
		pickupWheels.changeControlMode(TalonControlMode.Voltage);
		pickupWheels.set(degree);
	}
	public void testMecanumPosition(int position) {
		pickupWheels.changeControlMode(TalonControlMode.Position);
		pickupWheels.setPID(2, 1, 1);
		pickupWheels.set(position);
	}
	
}
