// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.Cybercavs2016Code.subsystems;

import org.usfirst.frc4678.Cybercavs2016Code.Robot;
import org.usfirst.frc4678.Cybercavs2016Code.RobotMap;
import org.usfirst.frc4678.Cybercavs2016Code.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class ManipulatorArm extends Subsystem {
	
	String manipulatorMode;
	int wristStartPosition = 0;
	int elbowStartPosition = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon manipulatorElbow = RobotMap.manipulatorArmmanipulatorElbow;
    private final CANTalon manipulatorWrist = RobotMap.manipulatorArmmanipulatorWrist;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new SetManipulatorArm());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
   
	//////////////////////////////////////
	//////////Setter Functions//////////
	/////////////////////////////////////
    
    public void setManipulatorWrist(int position) {
    	manipulatorWrist.configPeakOutputVoltage(+12f, -12f); //max and min power
    	manipulatorWrist.setPID(0.1, 0, 0); //PID values
    	manipulatorWrist.setAllowableClosedLoopErr(209);
    	manipulatorWrist.set(position); // allowable error in the PID position movement
    }
    public void setManipulatorElbow(int position) {
    	manipulatorElbow.configPeakOutputVoltage(+12f, -12f); //max and min power
    	manipulatorElbow.setPID(0.08, 0, 0); //PID values
    	manipulatorElbow.setAllowableClosedLoopErr(209);
    	manipulatorElbow.set(position); // allowable error in the PID position movement
    }
    public void setManipulatorElbowMode(int mode) {
		if (mode == 0) {
			manipulatorElbow.changeControlMode(TalonControlMode.Current);
		}
		if (mode == 1) {
			manipulatorElbow.changeControlMode(TalonControlMode.Disabled);
		}
		if (mode == 2) {
			manipulatorElbow.changeControlMode(TalonControlMode.Follower);
		}
		if (mode == 3) {
			manipulatorElbow.changeControlMode(TalonControlMode.MotionProfile);
		}
		if (mode == 4) {
			manipulatorElbow.changeControlMode(TalonControlMode.PercentVbus);
		}
		if (mode == 5) {
			manipulatorElbow.changeControlMode(TalonControlMode.Position);
		}
		if (mode == 6) {
			manipulatorElbow.changeControlMode(TalonControlMode.Speed);
		}
		if (mode == 7) {
			manipulatorElbow.changeControlMode(TalonControlMode.Voltage);
		}
	}
	public void setManipulatorWristMode(int mode) {
		if (mode == 0) {
			manipulatorWrist.changeControlMode(TalonControlMode.Current);
		}
		if (mode == 1) {
			manipulatorWrist.changeControlMode(TalonControlMode.Disabled);
		}
		if (mode == 2) {
			manipulatorWrist.changeControlMode(TalonControlMode.Follower);
		}
		if (mode == 3) {
			manipulatorWrist.changeControlMode(TalonControlMode.MotionProfile);
		}
		if (mode == 4) {
			manipulatorWrist.changeControlMode(TalonControlMode.PercentVbus);
		}
		if (mode == 5) {
			manipulatorWrist.changeControlMode(TalonControlMode.Position);
		}
		if (mode == 6) {
			manipulatorWrist.changeControlMode(TalonControlMode.Speed);
		}
		if (mode == 7) {
			manipulatorWrist.changeControlMode(TalonControlMode.Voltage);
		}
	}
	public void setManipulatorMode(String mode) {
		manipulatorMode = mode;
	}
	
	//////////////////////////////////////
	//////////Accessor Functions//////////
	/////////////////////////////////////
	
	public int getManipulatorWristPosition() {return manipulatorWrist.getEncPosition();}
	
	public int getManipulatorElbowPosition() {return manipulatorElbow.getEncPosition();}
	
	public int getManipulatorWristAngular() {return manipulatorWrist.getPulseWidthPosition();}
	
	public int getManipulatorElbowAngular() {return manipulatorElbow.getPulseWidthPosition();}
	
	public String getManipulatorMode() {return manipulatorMode;}
	
	//////////////////////////////////////
	//////////Movement Functions//////////
	/////////////////////////////////////
	
	public void readyShootMode() {
		setManipulatorWrist(Robot.manipulatorWristTestPosition());
		setManipulatorElbow(Robot.manipulatorElbowShootPosition());
	}
	public void restMode() {
		setManipulatorWrist(Robot.manipulatorWristRestPosition());
		setManipulatorElbow(Robot.manipulatorElbowRestPosition());
	}
	
	public void CalibrateManipulator() {
		wristStartPosition = (manipulatorWrist.getPulseWidthPosition() % 4096);
		elbowStartPosition = (manipulatorElbow.getPulseWidthPosition() % 4096);
		if (wristStartPosition < 0) {
			wristStartPosition = wristStartPosition + 4096;
		}
		if (elbowStartPosition < 0) {
			elbowStartPosition = elbowStartPosition + 4096;
		}
		manipulatorWrist.setPulseWidthPosition(wristStartPosition);
		manipulatorElbow.setPulseWidthPosition(elbowStartPosition);
		manipulatorWrist.setEncPosition(wristStartPosition);
		manipulatorElbow.setEncPosition(elbowStartPosition);
	}
}

